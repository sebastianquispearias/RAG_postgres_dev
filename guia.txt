docker run -d --name linave-local -e POSTGRES_PASSWORD=tuPassLocal -p 5433:5432 postgres:17

docker ps


# 1. Clonar el repositorio
cd C:\Users\User\Desktop
git clone https://github.com/Azure-Samples/rag-postgres-openai-python.git
cd rag-postgres-openai-python

# 2. Levantar Postgres en Docker
docker run -d `
  --name linave-local `
  -e POSTGRES_PASSWORD=tuPassLocal `
  -p 5433:5432 `
  postgres:17

# 3. Conectar y preparar la base de datos
$env:POSTGRES_HOST     = 'localhost'
$env:PG_PORT           = '5433'
$env:POSTGRES_USERNAME = 'postgres'
$env:POSTGRES_PASSWORD = 'tuPassLocal'
$env:POSTGRES_DATABASE = 'linave_full'
docker exec -it linave-local psql -U $env:POSTGRES_USERNAME -d $env:POSTGRES_DATABASE -c "\dt"
docker exec -it linave-local psql -U postgres -d linave_full -c "CREATE EXTENSION IF NOT EXISTS vector;"
docker exec -it linave-local psql -U postgres -d linave_full -c "
  CREATE INDEX IF NOT EXISTS hnsw_index_for_cosine_abastecimentos_embedding
    ON abastecimentos
    USING hnsw (embedding vector_cosine_ops)
    WITH (m = 16, ef_construction = 64);
"

# 4. Crear y activar entorno virtual Python
python -m venv linave_env
.\linave_env\Scripts\Activate.ps1

# 5. Instalar dependencias del backend
pip install -r src/backend/requirements.txt
pip install -e src/backend

# 6. (Opcional) Setup / seed para BD de prueba
python src/backend/fastapi_app/setup_postgres_database.py
python src/backend/fastapi_app/setup_postgres_seeddata.py

# 7. Poblado de embeddings en la BD real (si la columna está vacía)
python populate_embeddings.py

# 8. Arrancar el backend
uvicorn fastapi_app:create_app --factory --reload --host 0.0.0.0 --port 8000

# 9. Arrancar el frontend
cd src/frontend
npm install
npm run dev
cd ../..

# 10. Git & diffs
git show <SHA> | clip
git fetch origin otherdata
git diff main..origin/otherdata

# 11. Consultas SQL rápidas
psql -h localhost -p 5433 -U postgres -d linave_full -c "\dt"
psql -h localhost -p 5433 -U postgres -d linave_full -c "SELECT * FROM abastecimentos LIMIT 5;"
psql -h localhost -p 5433 -U postgres -d linave_full -c "\d abastecimentos"

______________________________________
conda create -n rag_env python=3.10
# ==========================
# 1) Navegar al proyecto
# ==========================
PS C:\Users\User\Desktop> cd rag-postgres-openai-python

# ==========================
# 2) Activar el entorno
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> conda activate rag_env

# ==========================
# 3) Revisar .env (opcional)
# ==========================
# Asegúrate de tener en la raíz un `.env` con al menos:
# POSTGRES_HOST=...
# POSTGRES_USERNAME=...
# POSTGRES_PASSWORD=...
# POSTGRES_DATABASE=...
# Y luego (para los scripts de test_db.py):
# PG_HOST=...
# PG_USER=...
# PG_PASSWORD=...
# PG_DATABASE=...

# ==========================
# 4) Instalar dependencias
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> pip install -r src/backend/requirements.txt
PS C:\Users\User\Desktop\rag-postgres-openai-python> pip install -e src/backend

# ==========================
# 5) Test básico de DB
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> python scripts/test_db.py

# ==========================
# 6) Añadir columnas vectoriales (una sola vez)
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> `
  docker exec -i linave-local psql -U postgres -d postgres -c "ALTER TABLE public.abastecimento    ADD COLUMN embedding_3l vector(1024);" `
  docker exec -i linave-local psql -U postgres -d postgres -c "ALTER TABLE public.manutencao      ADD COLUMN embedding_3l vector(1024);" `
  docker exec -i linave-local psql -U postgres -d postgres -c "ALTER TABLE public.quilometragem   ADD COLUMN embedding_3l vector(1024);" `
  docker exec -i linave-local psql -U postgres -d postgres -c "ALTER TABLE public.retorno_socorro ADD COLUMN embedding_3l vector(1024);" `
  docker exec -i linave-local psql -U postgres -d postgres -c "ALTER TABLE public.veiculos        ADD COLUMN embedding_3l vector(1024);"

# ==========================
# 7) Crear índices HNSW (una sola vez)
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> `
  docker exec -i linave-local psql -U postgres -d postgres -c "CREATE INDEX ON public.abastecimento    USING hnsw (embedding_3l vector_cosine_ops) WITH (m=16, ef_construction=64);" `
  docker exec -i linave-local psql -U postgres -d postgres -c "CREATE INDEX ON public.manutencao      USING hnsw (embedding_3l vector_cosine_ops) WITH (m=16, ef_construction=64);" `
  docker exec -i linave-local psql -U postgres -d postgres -c "CREATE INDEX ON public.quilometragem   USING hnsw (embedding_3l vector_cosine_ops) WITH (m=16, ef_construction=64);" `
  docker exec -i linave-local psql -U postgres -d postgres -c "CREATE INDEX ON public.retorno_socorro USING hnsw (embedding_3l vector_cosine_ops) WITH (m=16, ef_construction=64);" `
  docker exec -i linave-local psql -U postgres -d postgres -c "CREATE INDEX ON public.veiculos        USING hnsw (embedding_3l vector_cosine_ops) WITH (m=16, ef_construction=64);"

# ==========================
# 8) Generar embeddings
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> python scripts/generate_embeddings.py

# ==========================
# 9) Volver a verificar
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> python scripts/test_db.py

# ==========================
# 10) Build del frontend
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> cd src/frontend
PS C:\Users\User\Desktop\rag-postgres-openai-python\src\frontend> npm install
PS C:\Users\User\Desktop\rag-postgres-openai-python\src\frontend> npm run build
PS C:\Users\User\Desktop\rag-postgres-openai-python\src\frontend> cd ../..

# ==========================
# 11) Arrancar Backend
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> uvicorn fastapi_app:create_app --factory --reload --host 0.0.0.0 --port 8000

# ==========================
# 12) Arrancar Frontend en modo DEV
# ==========================
PS C:\Users\User\Desktop\rag-postgres-openai-python> cd src/frontend
PS C:\Users\User\Desktop\rag-postgres-openai-python\src\frontend> npm run dev
# → Abrir http://127.0.0.1:5173/ en tu navegador



1-Actualizar el Modelo (postgres_models.py):
2-Adaptar los Prompts (prompts/):
3-Modificar la Lógica de Búsqueda (query_rewriter.py):
4-Generar los Embeddings (Nuevo script o adaptación):

